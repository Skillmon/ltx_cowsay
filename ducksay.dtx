% \iffalse meta-comment
%
% File: ducksay.dtx Copyright (C) 2018 Jonathan P. Spratte
%
% This work  may be  distributed and/or  modified under  the conditions  of the
% LaTeX Project Public License (LPPL),  either version 1.3c  of this license or
% (at your option) any later version.  The latest version of this license is in
% the file:
%
%   http://www.latex-project.org/lppl.txt
%
% Alternatively you can use this work under the terms of the GNU General Public
% Licensce (GPL), version 3 or later, except that you might not redistribute it
% under the same  name if you change  its functionality.  Choose which of these
% licenses fits your needs the best.
%
% ------------------------------------------------------------------------------
%
%<*driver>^^A>>>
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
\input l3docstrip.tex
\askforoverwritefalse
\preamble

--------------------------------------------------------------
ducksay -- cowsay for LaTeX
E-mail: jspratte@yahoo.de
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
--------------------------------------------------------------

Copyright (C) 2017-2018 Jonathan P. Spratte

This  work may be  distributed and/or  modified under  the conditions  of the
LaTeX Project Public License (LPPL),  either version 1.3c  of this license or
(at your option) any later version.  The latest version of this license is in
the file:

  http://www.latex-project.org/lppl.txt

Alternatively you can use this work under the terms of the GNU General Public
Licensce (GPL), version 3 or later, except that you might not redistribute it
under the same  name if you change  its functionality.  Choose which of these
licenses fits your needs the best.

This work is "maintained" (as per LPPL maintenance status) by
  Jonathan P. Spratte.

This work consists of the file  ducksay.dtx
and the derived files           ducksay.pdf
                                ducksay.sty
                                ducksay.code.v1.tex
                                ducksay.code.v2.tex and
                                ducksay.animals.tex.

\endpreamble
% stop docstrip adding \endinput
\postamble
\endpostamble
\generate{\file{ducksay.sty}{\from{ducksay.dtx}{pkg}}}
\generate{\file{ducksay.code.v1.tex}{\from{ducksay.dtx}{code.v1}}}
\generate{\file{ducksay.code.v2.tex}{\from{ducksay.dtx}{code.v2}}}
\generate{\file{ducksay.animals.tex}{\from{ducksay.dtx}{animals}}}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%
\ProvidesFile{ducksay.dtx}
  [2018/08/25 cowsay for LaTeX]
\documentclass{l3doc}
\usepackage[all]{ducksay}
\renewcommand*\thefootnote{\fnsymbol{footnote}}
\newcommand*\anml{\meta{animal}}
\newcommand*\msg{\meta{message}}
\usepackage{enumitem}
\newenvironment{options}
  {\begin{description}[style=nextline,font=\normalfont\ttfamily]}
  {\end{description}}
\makeatletter
\newcommand*\availableAnimal[1]
  {%
    \@for\cs:=#1\do
      {%
        \ifx\cs\@empty\else
          \rlap{\expandafter\ducksay\expandafter[\cs]{\cs}}\hfill\null\\[1ex]%
        \fi
      }%
  }
\def\@oddfoot
  {%
    \null\hfil
    \makebox[0pt][c]
      {%
        \smash
          {%
            \ducksay[dog,body=\tiny,wd=3,msg-align=c,align=t,bubble=\normalsize]
              {\arabic{page}}%
          }%
      }%
    \hfil\null
  }
\let\@evenfoot\@oddfoot
\makeatother
\setcounter{secnumdepth}{5}
\setcounter{tocdepth}{5}
\NewDocumentCommand \tocmsg {}
  {%
    \marginpar
      {%
        \tiny
        \hfil
        \makebox[.\marginparwidth][l]
          {%
            \ducksay[head-in,bubble=\footnotesize,msg-align=c,align=t]
              {It's always\\good to\\keep the\\overview!}%
          }%
      }%
    \unskip
  }
\addtocontents{toc}{\protect\tocmsg\vspace*{-\baselineskip}}
\newcommand*\closingpage%>>>
  {%
    \clearpage
    \thispagestyle{empty}
    \bgroup
    \Huge
    \null\vfill
    \centering
    \makebox[0pt]{\duckthink{Who's gonna use it anyway?}}
    \vfill
    \hfill
    \smash
      {%
        \footnotesize
        \ducksay[small-yoda,wd=39,ht=3,msg-align=c,rel-align=r]
          {Hosted at\\\url{https://github.com/Skillmon/ltx_ducksay}\\it is.}%
      }
    \egroup
    \clearpage
  }%<<<
\begin{document}
  \DocInput{ducksay.dtx}
\end{document}
%</driver>^^A<<<
%<*pkg>^^A>>>
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{xparse,l3keys2e}

\def\ducksay@version{v2.0}
\def\ducksay@date{2018/08/25}

\ProvidesExplPackage
  {ducksay}           {\ducksay@date}
  {\ducksay@version}  {cowsay for LaTeX}

%</pkg>
%^^A<<<
% \fi
%
% \begin{titlepage}^^A>>>
%   \makeatletter
%   \centering
%   \Large
%     \ducksay[duck,bubble=\huge,msg-align=c,wd=8]{This is\\ducksay!}\\
%   \vfill
%   \normalsize
%   \hspace*{-2cm}
%     \ducksay[cow,bubble=\large]{\ducksay@version}\\
%   \small
%   \vspace*{-5cm}\hspace*{5cm}
%     \ducksay[small-duck,bubble=\normalsize]{But which Version?}
%   \null\hfil
%   \vspace{2cm}
%   \vfill
%   \vfill
%   \hspace*{-0cm}
%   \large
%   \smash{%
%     \ducksay[r2d2,bubble=\large]{by Jonathan P. Spratte}}
%   \small
%     \ducksay[hedgehog,bubble=\normalsize]{Today is \ducksay@date}
%   \makeatother
% \end{titlepage}^^A<<<
% \tableofcontents
%
% \begin{documentation}^^A>>>
%
% \section{Documentation}
%
% \subsection{Downward Compatibility Issues}
%
% \marginpar
%   {
%     \tiny
%     \ducksay[snail,bubble=\footnotesize,align=t]{Yep, I screwed up!}
%   }
%
% \begin{itemize}
%   \item Versions prior to v2.0 did use a regular expression for the option
%     |ligatures|, see \autoref{sec:options} for more on this issue. This issue
%     does occur independent on the used value of the |version| option.
% \end{itemize}
%
% \subsection{Version 1}
%
% \subsubsection{Introduction}
%
% This version is included for legacy support (old documents should behave the
% same without any change to them). For the bleeding edge version of
% \pkg{ducksay} skip this subsection and read \autoref{sec:v2}.
%
% \subsubsection{Macros}^^A>>>
% \marginpar
%   {%
%     \rlap
%       {%
%         \tiny
%         \ducksay[yoda,bubble=\footnotesize,align=t]{Use those, you might}%
%       }%
%   }
% The following macros are available:
%
% \begin{function}{\ducksay}^^A>>>
%   \begin{syntax}
%     \cs{ducksay}\oarg{options}\marg{message}
%   \end{syntax}
%   options might include any of the options described in
%   \autoref{sec:options}. Prints an \anml\ saying \msg. \msg\ is not read in
%   verbatim. Multi-line \msg s are possible using |\\|. |\\| should not be
%   inside a macro but at toplevel. Else use the option |ht|.
% \end{function}^^A<<<
%
% \begin{function}{\duckthink}^^A>>>
%   \begin{syntax}
%     \cs{duckthink}\oarg{options}\marg{message}
%   \end{syntax}
%   options might include any of the options described in
%   \autoref{sec:options}. Prints an \anml\ thinking \msg. \msg\ is not read in
%   verbatim. It is implemented using regular expressions replacing a |\|
%   which is only preceded by |\s*| in the first three lines with |O|
%   and |o|. It is therefore slower than \cs{ducksay}. Multi-line \msg s
%   are possible using |\\|. |\\| should not be inside a macro but at
%   toplevel. Else use the option |ht|.
% \end{function}^^A<<<
%
% \begin{function}{\DefaultAnimal}^^A>>>
%   \begin{syntax}
%     \cs{DefaultAnimal}\marg{animal}
%   \end{syntax}
%   use the \anml\ if none is given in the optional argument to \cs{ducksay}
%   or \cs{duckthink}. Package default is |duck|.
% \end{function}^^A<<<
%
% \begin{function}{\DucksayOptions}^^A>>>
%   \begin{syntax}
%     \cs{DucksayOptions}\marg{options}
%   \end{syntax}
%   set the defaults to the keys described in \autoref{sec:options}. Don't use
%   an \anml\ here, it has no effect.
% \end{function}^^A<<<
%
% \begin{function}{\AddAnimal}^^A>>>
%   \begin{syntax}
%     \cs{AddAnimal}\meta{*}\marg{animal}\meta{ascii-art}
%   \end{syntax}
%   adds \anml\ to the known animals. \meta{ascii-art} is multi-line verbatim
%   and therefore should be delimited either by matching braces or by anything
%   that works for \cs{verb}. If the star is given \anml\ is the new default.
%   One space is added to the begin of \anml\ (compensating the opening symbol).
%   For example, |snowman| is added with:\\[1ex]
%   \begin{minipage}{\linewidth}
%\begin{verbatim}
% \AddAnimal{snowman}
% {  \
%     \ _[_]_
%        (")
%     >-( : )-<
%      (__:__)}
%\end{verbatim}
%   \end{minipage}
%   It is not checked whether the animal already exists, you could therefore
%   redefine existing animals with this macro.
% \end{function}^^A<<<
%^^A<<<
%
% \subsubsection{Options}\label{sec:options}^^A>>>
% \marginpar
%   {%
%     \vspace*{-2em}\tiny
%     \hfill
%     \ducksay[hedgehog,bubble=\footnotesize,align=t]{Everyone likes\\options}%
%   }
% The following options are available to \cs{ducksay}, \cs{duckthink}, and
% \cs{DucksayOptions} and if not otherwise specified also as package options:
% \begin{options}
%   \item[\anml] 
%     One of the animals listed in \autoref{sec:animals} or any of the ones
%     added with \cs{AddAnimal}. Not useable as package option.
%   \item[animal=\anml]
%     a longer alternative to the use of \anml\ if used in \cs{ducksay} or
%     \cs{duckthink}. If it is used as a package option or in
%     \cs{DucksayOptions} it changes the default animal to \anml.
%   \item[bubble=\meta{code}]
%     use \meta{code} in a group right before the bubble (for font switches).
%     Might be used as a package option but not all control sequences work out
%     of the box there.
%   \item[body=\meta{code}]
%     use \meta{code} in a group right before the body (meaning the \anml).
%     Might be used as a package option but not all control sequences work out
%     of the box there. E.g., to right-align the \anml\ to the bubble, use
%     \verb|body=\hfill|.
%   \item[align=\meta{valign}]
%     use \meta{valign} as the vertical alignment specifier given to the
%     \env{tabular} which is around the contents of \cs{ducksay} and
%     \cs{duckthink}.
%   \item[msg-align=\meta{halign}]
%     use \meta{halign} for alignment of the rows of multi-line \msg s. It
%     should match a \texttt{tabular} column specifier. Default is |l|. It only
%     affects the contents of the speech bubble not the bubble.
%   \item[rel-align=\meta{column}]
%     use \meta{column} for alignment of the bubble and the body. It should
%     match a \env{tabular} column specifier. Default is |l|.
%   \item[wd=\meta{count}]
%     in order to detect the width the \msg\ is expanded. This might not work
%     out for some commands (e.g. \cs{url} from \pkg{hyperref}). If you
%     specify the width using |wd| the \msg\ is not expanded and
%     therefore the command \emph{might} work out. \meta{count} should be the
%     character count.
%   \item[ht=\meta{count}]
%     you might explicitly set the height (the row count) of the \msg. This only
%     has an effect if you also specify |wd|.
%   \item[ligatures=\meta{token list}]
%     each token you don't want to form ligatures during \cs{AddAnimal} should
%     be contained in this list. All of them get enclosed by grouping |{| and
%     |}| so that they can't form ligatures. Giving no argument (or an empty
%     one) might enhance compilation speed by disabling this replacement. The
%     formation of ligatures was only observed in combination with
%     \verb|\usepackage[T1]{fontenc}| by the author of this package. Therefore
%     giving the option |ligatures| without an argument might enhance the
%     compilation speed for you without any drawbacks. Initially this is set to
%     \texttt{\csuse{\detokenize{l_ducksay_ligatures_tl}}}.\\
%     \textbf{Note:} In earlier releases this option's expected argument was a
%     regular expression. This means that this option is not fully
%     downward compatible with older versions. The speed gain however seems
%     worth it (and I hope the affected documents are few).
% \end{options}
%^^A<<<
%
% \subsubsection{Defects}^^A>>>
% \begingroup
%   \reversemarginpar
%   \marginpar
%     {\tiny\hfill\ducksay[frog,bubble=\footnotesize,align=t]{Ohh, no!}}
% \endgroup
% \begin{itemize}
%   \item no automatic line wrapping
% \end{itemize}^^A<<<
%
% \subsection{Version 2}\label{sec:v2}
%
% \subsubsection{Introduction}
%
% Version 2 is the current version of \pkg{ducksay}. To use it specify
% |version=2| as an option to \cs{usepackage}. Version 2 features automatic line
% wrapping (if configured so) and in general more options (with some nasty
% argument parsing).
%
% If you're already used to version 1 you should note one important thing: You
% should only specify the |version| and the animals you want to be loaded during
% package loading as arguments to \cs{usepackage}. The other keys might not work
% and only don't throw errors or warnings because of the legacy support of
% version 1.
%
% \subsection{Dependencies}^^A>>>
% \marginpar
%   {%
%     \tiny
%     \rlap{\ducksay[kangaroo,bubble=\footnotesize,align=t]{We rely on you}}%
%   }
% The package depends on the two packages \pkg{xparse} and \pkg{l3keys2e}
% and all of their dependencies.
%^^A<<<
%
% \subsection{Available Animals}\label{sec:animals}^^A>>>
% \marginpar
%   {%
%     \tiny
%     \hfill
%     \makebox[8em][r]
%       {%
%         \ducksay[whale,bubble=\footnotesize,align=t]
%           {I'm the\\new one.}%
%       }%
%   }
% The following animals are provided by this package. I did not create them (but
% altered some), they belong to their original creators.
% \bgroup
% \scriptsize
% \DucksayOptions{bubble=\footnotesize}
% \begin{multicols}{2}
% \availableAnimal{^^A>>>
%   ,duck^^A
%   ,small-duck^^A
%   ,duck-family^^A
%   ,small-rabbit^^A
%   ,squirrel^^A
%   ,cow^^A
%   ,tux^^A
%   ,head-in^^A
%   ,pig^^A
%   ,frog^^A
%   ,snowman^^A
%   ,bunny^^A
%   ,dragon^^A
%   ,sodomized^^A
%   ,hedgehog^^A
%   ,kangaroo^^A
%   ,dog^^A
%   ,rabbit^^A
%   ,unicorn^^A
%   ,snail^^A
%   ,whale^^A
% }\end{multicols}\begin{multicols}{2}
% \availableAnimal{^^A
%   ,r2d2^^A
%   ,vader^^A
%   ,yoda-head^^A
%   ,small-yoda^^A
%   ,yoda^^A
% }^^A<<<
% \end{multicols}
% \egroup
%^^A<<<
%
% \subsection{Miscellaneous}^^A>>>
% \marginpar
%   {%
%     \rlap
%       {%
%         \tiny
%         \ducksay[squirrel,bubble=\footnotesize,align=t]{I'd choose WTFPL}%
%       }%
%   }
% This package is distributed under the terms of the GPLv3 or later, or the LPPL
% 1.3c or later, choose which ever license fits your needs the best.
%
% The package is hosted on \url{https://github.com/Skillmon/ltx_ducksay}, you
% might report bugs there.
%^^A<<<
%
% \end{documentation}^^A<<<
%
% \begin{implementation}^^A>>>
%
% \clearpage
%
% \section{Implementation}^^A>>>
%
%^^A main file >>>
%    \begin{macrocode}
%<*pkg>
%<@@=ducksay>
%    \end{macrocode}
%
% \subsection{Shared between versions}^^A>>>
%
% \subsubsection{Variables}^^A>>>
% \begin{variable}{\l_ducksay_strlen_int}^^A>>>
%    \begin{macrocode}
\int_new:N \l_ducksay_strlen_int
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\l_ducksay_lines_int}^^A>>>
%    \begin{macrocode}
\int_new:N \l_ducksay_lines_int
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\l_ducksay_msg_lines_seq}^^A>>>
%    \begin{macrocode}
\seq_new:N \l_ducksay_msg_lines_seq
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\l_ducksay_align_tl}^^A>>>
%    \begin{macrocode}
\tl_new:N \l_ducksay_align_tl
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\l_ducksay_msg_align_tl}^^A>>>
%    \begin{macrocode}
\tl_new:N \l_ducksay_msg_align_tl
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\l_ducksay_animal_tl}^^A>>>
%    \begin{macrocode}
\tl_new:N \l_ducksay_animal_tl
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\g__ducksay_all_animals_clist}^^A>>>
%    \begin{macrocode}
\clist_new:N \g__ducksay_all_animals_clist
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\ducksay_bubble:}^^A>>>
%    \begin{macrocode}
\cs_new:Npn \ducksay_bubble: {}
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\ducksay_body:}^^A>>>
%    \begin{macrocode}
\cs_new:Npn \ducksay_body: {}
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\l_ducksay_version_one_bool}^^A>>>
%    \begin{macrocode}
\bool_new:N \l_ducksay_version_one_bool
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\l_ducksay_version_two_bool}^^A>>>
%    \begin{macrocode}
\bool_new:N \l_ducksay_version_two_bool
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\l_ducksay_tmpa_box}^^A>>>
%    \begin{macrocode}
\box_new:N \l_ducksay_tmpa_box
%    \end{macrocode}
% \end{variable}^^A<<<
% \begin{variable}{\l_ducksay_tmpa_tl}^^A>>>
%    \begin{macrocode}
\tl_new:N  \l_ducksay_tmpa_tl
%    \end{macrocode}
% \end{variable}^^A<<<
%^^A<<<
%
% \subsubsection{Key-value setup}^^A>>>
%    \begin{macrocode}
\keys_define:nn { ducksay }
  {
    ,bubble .code:n       = \cs_set:Npn \ducksay_bubble: {#1}
    ,body   .code:n       = \cs_set:Npn \ducksay_body: {#1}
    ,align  .tl_set:N     = \l_ducksay_align_tl
    ,align  .value_required:n = true
    ,wd     .int_set:N    = \l_ducksay_strlen_int
    ,wd     .value_required:n = true
    ,ht     .int_set:N    = \l_ducksay_lines_int
    ,ht     .value_required:n = true
    ,animal .code:n       =
      { \keys_define:nn { ducksay } { default_animal .meta:n = { #1 } } }
    ,animal .initial:n    = duck
    ,msg-align .tl_set:N  = \l_ducksay_msg_align_tl
    ,msg-align .initial:n = l
    ,msg-align .value_required:n = true
    ,rel-align .tl_set:N  = \l_ducksay_rel_align_tl
    ,rel-align .initial:n = l
    ,rel-align .value_required:n = true
    ,ligatures .tl_set:N  = \l_ducksay_ligatures_tl
    ,ligatures .initial:n = { `<>,'- }
    ,unknown   .code:n    =
      { \msg_error:nnx { ducksay } { option-unknown } { \l_keys_key_tl } }
    ,version   .choice:
    ,version / 1 .code:n  = 
      {
        \bool_set_false:N \l_ducksay_version_two_bool
        \bool_set_true:N  \l_ducksay_version_one_bool
      }
    ,version / 2 .code:n  =
      {
        \bool_set_false:N \l_ducksay_version_one_bool
        \bool_set_true:N  \l_ducksay_version_two_bool
      }
    ,version   .initial:n = 1
  }
%    \end{macrocode}
% Setting up a clist of all included animals^^A>>>
%    \begin{macrocode}
\clist_set:Nn \g__ducksay_all_animals_clist
  {
    duck
    ,small-duck
    ,duck-family
    ,squirrel
    ,cow
    ,head-in
    ,sodomized
    ,tux
    ,pig
    ,frog
    ,snowman
    ,bunny
    ,small-rabbit
    ,rabbit
    ,dragon
    ,hedgehog
    ,kangaroo
    ,dog
    ,snail
    ,unicorn
    ,whale
    ,r2d2
    ,vader
    ,yoda-head
    ,small-yoda
    ,yoda
  }
%    \end{macrocode}
% define load-switches for each of them
%    \begin{macrocode}
\clist_map_inline:Nn \g__ducksay_all_animals_clist
  {
    \bool_new:c { g__ducksay_load_#1_bool }
    \keys_define:nn { ducksay }
      { #1 .bool_gset:c = { g__ducksay_load_#1_bool } }
  }
%    \end{macrocode}
% define one key to call all of them
%    \begin{macrocode}
\keys_define:nn { ducksay }
  {
    ,all .code:n =
      {
        \tl_if_empty:nTF { #1 }
          {
            \clist_map_inline:Nn \g__ducksay_all_animals_clist
              { \keys_set:nn { ducksay } { ##1 } }
          }
          {
            \clist_map_inline:Nn \g__ducksay_all_animals_clist
              { \keys_set:nn { ducksay } { ##1 = #1 } }
          }
      }
  }
%    \end{macrocode}^^A<<<
% by default load |duck|
%    \begin{macrocode}
\keys_set:nn { ducksay } { duck }
%    \end{macrocode}
%
%    \begin{macrocode}
\ProcessKeysOptions { ducksay }
%    \end{macrocode}
%
% Undefine the |all| key and all of the load-time keys
%    \begin{macrocode}
\keys_define:nn { ducksay } { all .undefine: }
\clist_map_inline:Nn \g__ducksay_all_animals_clist
  {
    \keys_define:nn { ducksay } { #1 .undefine: }
  }
%    \end{macrocode}^^A<<<
%
% \subsubsection{Functions}^^A>>>
%
% \paragraph{Internal}^^A>>>
%
% \begin{macro}{\ducksay_replace_verb_newline:Nn}^^A>>>
%    \begin{macrocode}
\cs_new_protected:Npx \ducksay_replace_verb_newline:Nn #1 #2
  {
    \tl_replace_all:Nnn #1 { \char_generate:nn { 13 } { 12 } } { #2 }
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_process_verb_newline:nn}^^A>>>
%    \begin{macrocode}
\cs_new_protected:Npn \ducksay_process_verb_newline:nn #1 #2
  {
    \tl_set:Nn \ProcessedArgument { #2 }
    \ducksay_replace_verb_newline:Nn \ProcessedArgument { #1 }
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_add_animal_inner:nnn}^^A>>>
%    \begin{macrocode}
\cs_new_protected:Npn \ducksay_add_animal_inner:nnn #1 #2 #3
  {
    \tl_set:Nn \l_ducksay_tmpa_tl { \ #3 }
    \tl_map_inline:Nn \l_ducksay_ligatures_tl
      {
        \tl_replace_all:Nnn \l_ducksay_tmpa_tl { ##1 } { { ##1 } }
      }
    \ducksay_replace_verb_newline:Nn \l_ducksay_tmpa_tl { \tabularnewline\null }
    \tl_gset_eq:cN { g_ducksay_animal_#2_tl } \l_ducksay_tmpa_tl
    \keys_define:nn { ducksay }
      {
        #2 .code:n =
          { \tl_set_eq:Nc \l_ducksay_animal_tl { g_ducksay_animal_#2_tl } }
      }
    \IfBooleanT{#1}
      {
        \keys_define:nn { ducksay } { default_animal .meta:n = { #2 } }
      }
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay@AddAnimal}^^A>>>
%   Those animals provided by the package are not necessarily to be defined and
%   might already be defined. Therefore they are added with
%   \cs{ducksay@AddAnimal}.
%    \begin{macrocode}
\NewDocumentCommand \ducksay@AddAnimal { s m +v }
  {
    \bool_if:cT { g__ducksay_load_#2_bool }
      {
        \tl_if_exist:cF { g_ducksay_animal_#2_tl }
          { \ducksay_add_animal_inner:nnn { #1 } { #2 } { #3 } }
      }
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
%^^A<<<
%
% \paragraph{Document level}^^A>>>
%
% \begin{macro}{\DefaultAnimal}^^A>>>
%    \begin{macrocode}
\NewDocumentCommand \DefaultAnimal { m }
  {
    \keys_define:nn { ducksay } { default_animal .meta:n = { #1 } }
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\DucksayOptions}^^A>>>
%    \begin{macrocode}
\NewDocumentCommand \DucksayOptions { m }
  {
    \keys_set:nn { ducksay } { #1 }
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\AddAnimal}^^A>>>
%    \begin{macrocode}
\NewDocumentCommand \AddAnimal { s m +v }
  {
    \ducksay_add_animal_inner:nnn { #1 } { #2 } { #3 }
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%^^A<<<
%
%^^A<<<
%
%^^A<<<
%
% \subsubsection{Load the Correct Version and the Animals}^^A>>>
%    \begin{macrocode}
\bool_if:NT \l_ducksay_version_one_bool
  { \input{ducksay.code.v1.tex} }
\bool_if:NT \l_ducksay_version_two_bool
  { \input{ducksay.code.v2.tex} }
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOff
\input{ducksay.animals.tex}
%    \end{macrocode}
%^^A<<<
%
%    \begin{macrocode}
%</pkg>
%    \end{macrocode}
%^^A<<<
%
% \subsection{Version 1}^^A>>>
%    \begin{macrocode}
%<*code.v1>
%    \end{macrocode}
%
% \subsubsection{Regular Expressions}^^A>>>
% Regular expressions for \cs{duckthink}
%    \begin{macrocode}
\regex_const:Nn \c_ducksay_first_regex  { \A(.\s*)\\ }
\regex_const:Nn \c_ducksay_second_regex { \A(.[^\c{null}]*\c{null}\s*)\\ }
\regex_const:Nn \c_ducksay_third_regex  {
  \A(.[^\c{null}]*\c{null}[^\c{null}]*\c{null}\s*)\\ }
%    \end{macrocode}
%^^A<<<
%
% \subsubsection{Messages}^^A>>>
%    \begin{macrocode}
\msg_new:nnnn { ducksay } { option-unknown }
  { Unknown\ option\ '#1'\ for\ package\ ducksay. }
  {
    If\ the\ option\ corresponds\ to\ one\ of\ the\ animals,\ make\ sure\ to\ 
    load\ that\ animal.
  }
%    \end{macrocode}^^A<<<
%
% \subsubsection{Functions}^^A>>>
% \paragraph{Internal}^^A>>>
%
% \begin{macro}{\ducksay_longest_line:n}^^A>>>
%   Calculate the length of the longest line
%    \begin{macrocode}
\cs_new:Npn \ducksay_longest_line:n #1
  {
    \int_incr:N \l_ducksay_lines_int
    \exp_args:NNx \tl_set:Nn \l_ducksay_tmpa_tl { #1 }
    \regex_replace_all:nnN { \s } { \c { space } } \l_ducksay_tmpa_tl
    \int_set:Nn \l_ducksay_strlen_int
      {
        \int_max:nn { \l_ducksay_strlen_int } { \tl_count:N \l_ducksay_tmpa_tl }
      }
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_open_bubble:}^^A>>>
%   Draw the opening bracket of the bubble
%    \begin{macrocode}
\cs_new:Npn \ducksay_open_bubble:
  {
    \begin{tabular}{@{}l@{}}
      \null\\
      \int_compare:nNnTF {\l_ducksay_lines_int} = {1} { ( }
        {
          /
          \int_step_inline:nnn { 3 } { \l_ducksay_lines_int } { \\\kern-0.5ex| }
          \\\detokenize{\ }
        }
      \\[-1ex]\null
    \end{tabular}
    \begin{tabular}{@{}l@{}}
      _\\
      \int_step_inline:nnn { 2 } { \l_ducksay_lines_int } { \\ } \\[-1ex]
      \mbox { - }
    \end{tabular}
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_close_bubble:}^^A>>>
%   Draw the closing bracket of the bubble
%    \begin{macrocode}
\cs_new:Npn \ducksay_close_bubble:
  {
    \begin{tabular}{@{}l@{}}
      _\\
      \int_step_inline:nnn { 2 } { \l_ducksay_lines_int } { \\ } \\[-1ex]
      { - }
    \end{tabular}
    \begin{tabular}{@{}r@{}}
      \null\\
      \int_compare:nNnTF { \l_ducksay_lines_int } = { 1 }
        { ) }
        {
          \detokenize {\ }
          \int_step_inline:nnn { 3 } { \l_ducksay_lines_int } { \\|\kern-0.5ex }
          \\/
        }
      \\[-1ex]\null
    \end{tabular}
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_print_msg:nn}^^A>>>
%   Print out the message
%    \begin{macrocode}
\cs_new:Npn \ducksay_print_msg:nn #1 #2
  {
    \begin{tabular}{@{} #2 @{}}
      \int_step_inline:nn { \l_ducksay_strlen_int } { _ } \\
      #1\\[-1ex]
      \int_step_inline:nn { \l_ducksay_strlen_int } { { - } }
    \end{tabular}
  }
\cs_generate_variant:Nn \ducksay_print_msg:nn { nV }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_print:nn}^^A>>>
%   Print out the whole thing
%    \begin{macrocode}
\cs_new:Npn \ducksay_print:nn #1 #2
  {
    \int_compare:nNnTF { \l_ducksay_strlen_int } = { 0 }
      {
        \seq_set_split:Nnn \l_ducksay_msg_lines_seq { \\ } { #1 }
        \seq_map_function:NN \l_ducksay_msg_lines_seq \ducksay_longest_line:n
      }
      {
        \int_compare:nNnT { \l_ducksay_lines_int } = { 0 }
          {
            \regex_count:nnN { \c { \\ } } { #1 } \l_ducksay_lines_int
            \int_incr:N \l_ducksay_lines_int
          }
      }
    \group_begin:
      \frenchspacing
      \verbatim@font
      \@noligs
      \begin{tabular}[\l_ducksay_align_tl]{@{}#2@{}}
        \ducksay_bubble:
        \begin{tabular}{@{}l@{}}
          \ducksay_open_bubble:
          \ducksay_print_msg:nV { #1 } \l_ducksay_msg_align_tl
          \ducksay_close_bubble:
        \end{tabular}\\
        \ducksay_body:
        \begin{tabular}{@{}l@{}}
          \l_ducksay_animal_tl
        \end{tabular}
      \end{tabular}
    \group_end:
  }
\cs_generate_variant:Nn \ducksay_print:nn { nV }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_prepare_say_and_think:n}^^A>>>
%   Reset some variables
%    \begin{macrocode}
\cs_new:Npn \ducksay_prepare_say_and_think:n #1
  {
    \int_zero:N \l_ducksay_strlen_int
    \int_zero:N \l_ducksay_lines_int
    \keys_define:nn { ducksay } { animal .meta:n = { ##1 } }
    \keys_set:nn { ducksay } { default_animal , #1 }
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_to_duckthink:}^^A>>>
%   Convert ducksay to duckthink
%    \begin{macrocode}
\cs_new:Npn \ducksay_to_duckthink:
  {
    \regex_replace_once:NnN \c_ducksay_first_regex  { \1O } \l_ducksay_animal_tl
    \regex_replace_once:NnN \c_ducksay_second_regex { \1o } \l_ducksay_animal_tl
    \regex_replace_once:NnN \c_ducksay_third_regex  { \1o } \l_ducksay_animal_tl
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%^^A<<<
%
% \paragraph{Document level}^^A>>>
%
% \begin{macro}{\ducksay}^^A>>>
%    \begin{macrocode}
\NewDocumentCommand \ducksay { O{} m }
  {
    \group_begin:
      \ducksay_prepare_say_and_think:n { #1 }
      \ducksay_print:nV { #2 } \l_ducksay_rel_align_tl
    \group_end:
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\duckthink}^^A>>>
%    \begin{macrocode}
\NewDocumentCommand \duckthink { O{} m }
  {
    \group_begin:
      \ducksay_prepare_say_and_think:n { #1 }
      \ducksay_to_duckthink:
      \ducksay_print:nV { #2 } \l_ducksay_rel_align_tl
    \group_end:
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%^^A<<<
%^^A<<<
%
%    \begin{macrocode}
%</code.v1>
%    \end{macrocode}^^A<<<
%
% \subsection{Version 2}^^A>>>
%    \begin{macrocode}
%<*code.v2>
%    \end{macrocode}
%
% \subsubsection{Variables}^^A>>>
%
% \paragraph{Token Lists}
%    \begin{macrocode}
\tl_new:N \l_ducksay_body_fount_tl
\tl_new:N \l_ducksay_body_to_msg_align_body_tl
\tl_new:N \l_ducksay_body_to_msg_align_msg_tl 
\tl_new:N \l_ducksay_bubble_fount_tl
\tl_new:N \l_ducksay_msg_fount_tl
\tl_new:N \l_ducksay_output_h_pole_tl
\tl_new:N \l_ducksay_output_v_pole_tl
%    \end{macrocode}
%
% \paragraph{Boxes}
%    \begin{macrocode}
\box_new:N \l_ducksay_msg_box
%    \end{macrocode}
%
% \paragraph{Coffins}
%    \begin{macrocode}
\coffin_new:N \l_ducksay_body_coffin
\coffin_new:N \l_ducksay_bubble_bottom_coffin
\coffin_new:N \l_ducksay_bubble_close_coffin
\coffin_new:N \l_ducksay_bubble_open_coffin
\coffin_new:N \l_ducksay_bubble_top_coffin
\coffin_new:N \l_ducksay_msg_coffin
%    \end{macrocode}
%
% \paragraph{Dimensions}
%    \begin{macrocode}
\dim_new:N \l_ducksay_hpad_dim
\dim_new:N \l_ducksay_vpad_dim
\dim_new:N \l_ducksay_bubble_bottom_kern_dim
\dim_new:N \l_ducksay_bubble_top_kern_dim
\dim_new:N \l_ducksay_body_x_offset_dim
\dim_new:N \l_ducksay_body_y_offset_dim
\dim_new:N \l_ducksay_msg_width_dim
\dim_new:N \l_ducksay_output_x_offset_dim
\dim_new:N \l_ducksay_output_y_offset_dim
%    \end{macrocode}
%
%^^A<<<
%
% \subsubsection{Functions}^^A>>>
%
% \paragraph{Internal}^^A>>>
%
% \begin{macro}{\ducksay_shipout:}^^A>>>
%    \begin{macrocode}
\cs_new_protected:Npn \ducksay_shipout:
  {
    \hbox_set:Nn \l_ducksay_tmpa_box { \l_ducksay_bubble_fount_tl - }
    \int_set:Nn \l_ducksay_msg_wd_int
      {
        \fp_eval:n
          {
            ceil 
              ( \box_wd:N \l_ducksay_msg_box / \box_wd:N \l_ducksay_tmpa_box )
          }
      }
    \int_set:Nn \l_ducksay_msg_ht_int
      {
        \fp_eval:n
          {
            ceil
              (
                ( \box_ht:N \l_ducksay_msg_box + \box_dp:N \l_ducksay_msg_box )
                / ( \arraystretch * \baselineskip )
              )
          }
      }
    \hcoffin_set:Nn \l_ducksay_bubble_open_coffin
      {
        \l_ducksay_bubble_fount_tl
        \begin{tabular}{@{}l@{}}
          \int_compare:nNnTF { \l_ducksay_msg_ht_int } = { \c_one_int }
            {
              (
            }
            {
              /\\
              \int_step_inline:nnn { \c_three_int } { \l_ducksay_msg_ht_int }
                { \kern-.5ex|\\ }
              \c_backslash_str
            }
        \end{tabular}
      }
    \hcoffin_set:Nn \l_ducksay_bubble_close_coffin
      {
        \l_ducksay_bubble_fount_tl
        \begin{tabular}{@{}r@{}}
          \int_compare:nNnTF { \l_ducksay_msg_ht_int } = { \c_one_int }
            {
              )
            }
            {
              \c_backslash_str \\
              \int_step_inline:nnn { \c_three_int } { \l_ducksay_msg_ht_int }
                { |\kern-.5ex\\ }
              /
            }
        \end{tabular}
      }
    \hcoffin_set:Nn \l_ducksay_bubble_top_coffin
      {
        \l_ducksay_bubble_fount_tl
        { _ } { _ }
        \int_step_inline:nn { \l_ducksay_msg_wd_int } { { _ } }
      }
    \hcoffin_set:Nn \l_ducksay_bubble_bottom_coffin
      {
        \l_ducksay_bubble_fount_tl
        { - } { - }
        \int_step_inline:nn { \l_ducksay_msg_wd_int } { { - } }
      }
    \hcoffin_set:Nn \l_ducksay_msg_coffin { \box_use:N \l_ducksay_msg_box }
    \hcoffin_set:Nn \l_ducksay_body_coffin
      {
        \l_ducksay_body_fount_tl
        \begin{tabular} { @{} l @{} }
          \l_ducksay_animal_tl
        \end{tabular}
      }
    \bool_if:NT \l_ducksay_mirrored_body_bool
      {
        \coffin_scale:Nnn \l_ducksay_body_coffin { -\c_one_int } { \c_one_int }
      }
    \dim_set:Nn \l_ducksay_hpad_dim
      {
        .5 *
        (
          \coffin_wd:N \l_ducksay_bubble_top_coffin
          - \coffin_wd:N \l_ducksay_msg_coffin
        )
      }
    \dim_set:Nn \l_ducksay_vpad_dim
      {
        .5 *
        (
          \coffin_ht:N \l_ducksay_bubble_open_coffin
          + \coffin_dp:N \l_ducksay_bubble_open_coffin
          - \coffin_ht:N \l_ducksay_msg_coffin
          - \coffin_dp:N \l_ducksay_msg_coffin
        )
      }
    \coffin_join:NnnNnnnn
      \l_ducksay_msg_coffin         { l } { vc }
      \l_ducksay_bubble_open_coffin { r } { vc }
      { - \l_ducksay_hpad_dim } { \c_zero_dim }
    \coffin_join:NnnNnnnn
      \l_ducksay_msg_coffin          { r } { vc }
      \l_ducksay_bubble_close_coffin { l } { vc }
      { \l_ducksay_hpad_dim } { \c_zero_dim }
    \coffin_join:NnnNnnnn
      \l_ducksay_msg_coffin        { hc } { t }
      \l_ducksay_bubble_top_coffin { hc } { b }
      { \c_zero_dim } { \l_ducksay_bubble_top_kern_dim }
    \coffin_join:NnnNnnnn
      \l_ducksay_msg_coffin           { hc } { b }
      \l_ducksay_bubble_bottom_coffin { hc } { t }
      { \c_zero_dim } { \l_ducksay_bubble_bottom_kern_dim }
    \coffin_join:NVnNVnnn
      \l_ducksay_msg_coffin  \l_ducksay_body_to_msg_align_msg_tl  { b }
      \l_ducksay_body_coffin \l_ducksay_body_to_msg_align_body_tl { t }
      { \l_ducksay_body_x_offset_dim } { \l_ducksay_body_y_offset_dim }
    \coffin_typeset:NVVnn \l_ducksay_msg_coffin
      \l_ducksay_output_h_pole_tl \l_ducksay_output_v_pole_tl
      { \l_ducksay_output_x_offset_dim } { \l_ducksay_output_y_offset_dim }
    \group_end:
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% ^^A\subparagraph{Questionable Syntax Introducing Functions (Hacks)}^^A>>>
%
%^^A<<<
%
% \subparagraph{Message Reading Functions}^^A>>>
%
% Version 2 has different ways of reading the message argument of \cs{ducksay}
% and \cs{duckthink}. They all should allow almost arbitrary content and the
% height and width are set based on the dimensions.
%
% \begin{macro}{\ducksay_eat_argument_tabular:w}^^A>>>
%    \begin{macrocode}
\NewDocumentCommand \ducksay_eat_argument_tabular:w
  { >{ \ducksay_process_verb_newline:nn {} } +v }
  {
    \hbox_set:Nn \l_ducksay_msg_box
      {
        \l_ducksay_msg_fount_tl
        \ducksay_msg_tabular_begin:
          \scantokens { #1 }
        \ducksay_msg_tabular_end:
      }
    \ducksay_shipout:
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_eat_argument_hbox:w}^^A>>>
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \ducksay_eat_argument_hbox:w
  {
    \afterassignment \ducksay_eat_argument_hbox_inner:w
    \let \l_ducksay_nothing =
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_eat_argument_hbox_inner:w}^^A>>>
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \ducksay_eat_argument_hbox_inner:w
  {
    \setbox \l_ducksay_msg_box \hbox \c_group_begin_token
      \group_insert_after:N \ducksay_shipout:
      \l_ducksay_msg_fount_tl
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_eat_argument_vbox:w}^^A>>>
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \ducksay_eat_argument_vbox:w
  {
    \afterassignment \ducksay_eat_argument_vbox_inner:w
    \let \l_ducksay_nothing =
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\ducksay_eat_argument_vbox_inner:w}^^A>>>
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \ducksay_eat_argument_vbox_inner:w
  {
    \setbox \l_ducksay_msg_box \vbox \c_group_begin_token
      \hsize \l_ducksay_msg_width_dim
      \group_insert_after:N \ducksay_shipout:
      \l_ducksay_msg_fount_tl
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
%^^A<<<
%
% \subparagraph{Generating Variants}^^A>>>
%
%    \begin{macrocode}
\cs_generate_variant:Nn \coffin_join:NnnNnnnn { NVnNVnnn }
\cs_generate_variant:Nn \coffin_typeset:Nnnnn { NVVnn }
%    \end{macrocode}
%
%^^A<<<
%
%^^A<<<
%
% \paragraph{Document level}^^A>>>
%
% \begin{macro}{\ducksay}^^A>>>
%    \begin{macrocode}
\NewDocumentCommand \ducksay { O{} }
  {
    \group_begin:
      \tl_set:Nn \l_ducksay_say_or_think_tl { say }
      \ducksay_digest_options:n { #1 }
      \ducksay_eat_argument:w
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
% \begin{macro}{\duckthink}^^A>>>
%    \begin{macrocode}
\NewDocumentCommand \duckthink { O{} }
  {
    \group_begin:
      \tl_set:Nn \l_ducksay_say_or_think_tl { think }
      \ducksay_digest_options:n { #1 }
      \ducksay_eat_argument:w
  }
%    \end{macrocode}
% \end{macro}^^A<<<
%
%^^A<<<
%
%^^A<<<
%
%    \begin{macrocode}
%</code.v2>
%    \end{macrocode}^^A<<<
%
% \subsection{Definition of the Animals}^^A>>>
%
%    \begin{macrocode}
%<*animals>
%^^A some of the below are from http://ascii.co.uk/art/kangaroo
\ducksay@AddAnimal{duck}%>>>
{  \
    \   __
      >(' )
        )/
       /(
      /  `----/
      \  ~=- /
    ~^~^~^~^~^~^~^}%<<<
\ducksay@AddAnimal{small-duck}%>>>
{  \
    \
      >()_
       (__)__ _}%<<<
\ducksay@AddAnimal{duck-family}%>>>
{  \
    \   __
      >(' )
        )/
       /(
      /  `----/  -()_  >()_
    __\__~=-_/__ _(__)__(__)__ _}%<<<
\ducksay@AddAnimal{cow}%>>>
{  \  ^__^
    \ (oo)\_______
      (__)\       )\/\
          ||----w |
          ||     ||}%<<<
\ducksay@AddAnimal{head-in}%>>>
{  \  
    \ ^__^         /
      (oo)\_______/  ________
      (__)\       )=(  ___|_ \____
          ||----w |  \ \    \____ |
          ||     ||   ||         ||}%<<<
\ducksay@AddAnimal{sodomized}%>>>
{  \             _
    \           (_)
      ^__^       / \
      (oo)\_____/_\ \
      (__)\       ) /
          ||----w ((
          ||     ||>>}%<<<
\ducksay@AddAnimal{tux}%>>>
{  \
    \  .--. 
      |o_o |
      |\_/ |
     //   \ \
    (|     | )
   /'\_   _/`\
   \___)=(___/}%<<<
\ducksay@AddAnimal{pig}%>>>
+  \     _//| .-~~~-.
    \ _/oo  }        }-@
     ('')_  }        |
      `--'| { }--{  }
           //_/  /_/+%<<<
\ducksay@AddAnimal{frog}%>>>
{   \
     \ (.)_(.)
    _ (   _   ) _
   / \/`-----'\/ \
 __\ ( (     ) ) /__
 )   /\ \._./ /\   (
  )_/ /|\   /|\ \_(}%<<<
\ducksay@AddAnimal{snowman}%>>>
{  \
    \_[_]_
      (")
   >-( : )-<
    (__:__)}%<<<
\ducksay@AddAnimal{hedgehog}%>>>
{  \    .\|//||\||.
    \  |/\/||/|//|/|
      /. `|/\\|/||/||
     o__,_|//|/||\||'}%<<<
\ducksay@AddAnimal{kangaroo}%>>>
{  \
    \ _,'   ___
     <__\__/   \
        \_  /  _\
          \,\ / \\
            //   \\
          ,/'     `\_,}%<<<
%^^A http://chris.com/ascii/index.php?art=animals/rabbits
\ducksay@AddAnimal{rabbit}%>>>
{ \     / \`\         __
   \   |  \ `\      /`/ \
    \  \_/`\  \-"-/` /\  \
            |       |  \  |
            (d     b)   \_/
            /       \
        ,".|.'.\_/.'.|.",
       /   /\' _|_ '/\   \
       |  /  '-`"`-'  \  |
       | |             | |
       | \    \   /    / |
        \ \    \ /    / /
         `"`\   :   /'"`
             `""`""`}%<<<
\ducksay@AddAnimal{bunny}%>>>
{ \
   \      /
      /\ /
       ( )
     .( o ).}%<<<
\ducksay@AddAnimal{small-rabbit}%>>>
{  \
    \ _//
     (')---.
      _/-_( )o}%<<<
\ducksay@AddAnimal{dragon}%>>>
{     \                    / \  //\
       \    |\___/|      /   \//  \\
        \   /0  0  \__  /    //  | \ \    
           /     /  \/_/    //   |  \  \  
           @_^_@'/   \/_   //    |   \   \ 
           //_^_/     \/_ //     |    \    \
        ( //) |        \///      |     \     \
      ( / /) _|_ /   )  //       |      \     _\
    ( // /) '/,_ _ _/  ( ; -.    |    _ _\.-~        .-~~~^-.
  (( / / )) ,-{        _      `-.|.-~-.           .~         `.
 (( // / ))  '/\      /                 ~-. _ .-~      .-~^-.  \
 (( /// ))      `.   {            }                   /      \  \
  (( / ))     .----~-.\        \-'                 .~         \  `. \^-.
             ///.----..>        \             _ -~             `.  ^-`  ^-_
               ///-._ _ _ _ _ _ _}^ - - - - ~                     ~-- ,.-~
                                                                  /.-~}%<<<
%^^A http://www.ascii-art.de/ascii/def/dogs.txt
\ducksay@AddAnimal{dog}%>>>
{  \     __
    \ .-'\/\
       "\   '------.
     ___/       (  .'_____
    '-----'"""'------"""""'}%<<<
%^^A http://ascii.co.uk/art/squirrel
\ducksay@AddAnimal{squirrel}%>>>
{  \           ,;:;;,
    \    ,    ;;;;;
      .=',    ;:;;:,
     /_', "=. ';:;:;
     @=:__,  \,;:;:'
       _(\.=  ;:;;'
      `"_(  _/="`
       `"'``}%<<<
\ducksay@AddAnimal{snail}%>>>
{  \
    \          .-""-.
      oo      ; .-.  :
       \\__..-: '.__.')._
        "-._.._'.__.-'_.."}%<<<
%^^A http://www.ascii-art.de/ascii/uvw/unicorn.txt
\ducksay@AddAnimal{unicorn}%>>>
{   \
     \       /((((((\\\\
     ---====((((((((((\\\\\
          ((           \\\\\\\
          ( (*    _/      \\\\\\\
            \    /  \      \\\\\\_         __,,__
             |  |   |       </    "------""     ((\\\\
             o_|   /        /                      \ \\\\    \\\\\\\
                  |  ._    (                        \ \\\\\\\\\\\\\\\\
                  | /                       /       /    \\\\\\\     \\
          .______/\/     /                 /       /         \\\
         / __.____/    _/          ___----(       /\
        / / / ________/:______,---'        \     /  \_
       / /  \ \                             \   \ \_  \
      ( <    \ \                             >  /    \ \
       \/      \\_                          / /       > )
                \_|                        / /       / /
                                         _//       _//
                                       /_|       /_|}%<<<
%^^A https://asciiart.website//index.php?art=animals/other%20(water)
\ducksay@AddAnimal{whale}%>>>
{ \                |-.
   \     .---._     \ \.--|
    \  /       `-..__)  ,-'
      |     .          /
       \--.__,   .__.,'
        `-.___'._\_.'}%<<<
%^^A from http://www.ascii-art.de/ascii/s/starwars.txt :
\ducksay@AddAnimal{yoda}%>>>
{   \
     \             ____
      \         _.' :  `._
            .-.'`.  ;   .'`.-.
   __      / : ___\ ;  /___ ; \      __
 ,'_ ""--.:__;".-.";: :".-.":__;.--"" _`,
 :' `.t""--.. '<@.`;_  ',@>` ..--""j.' `;
      `:-.._J '-.-'L__ `-- ' L_..-;'
        "-.__ ;  .-"  "-.  : __.-"
            L ' /.------.\ ' J
             "-.   "--"   .-"
            __.l"-:_JL_;-";.__
         .-j/'.;  ;""""  / .'\"-.
       .' /:`. :  :     /.".'';  `.
    .-"  / ;`.".  :    ."."   :    "-.
 .+"-.  : :   ".".". ."."      ;-._   \
 ; \  `.; ; .   "."-"."        : : "+. ;
 :  ;   ; ;  .   ."."    ;     : ;  : \:
 ;  :   ; :     / /     /  ,   ;:   ;  :
: \  ;  :  ;   ; /     :  ,   : ;  /  ::
;  ; :   ; :  ; ;      ;      ;   :   ;:
:  :  ;  :  ;. ;      '      : :  ;  : ;
;\    :   ; : .          ,   ; ;     ; ;
: `."-;   :  ;      .   ;   :  ;    /  ;
 ;    -:   ; :      ,  ,    ;  : .-"   :
 :\     \  :  ;    ,       : \.-"      :
  ;`.    \  ; :   .   ,    ;.'_..--  / ;
  :  "-.  "-:  ;     ,    :/."      .'  :
   \         \ :    :     ;/  __        :
    \       .-`.\        /t-""  ":-+.   :
     `.  .-"    `l    __/ /`. :  ; ; \  ;
       \   .-" .-"-.-"  .' .'j \  /   ;/
        \ / .-"   /.     .'.' ;_:'    ;
         :-""-.`./-.'     /    `.___.'
               \ `t  ._  /
                "-.t-._:'}%<<<
\ducksay@AddAnimal{yoda-head}%>>>
{   \
     \             ____
      \         _.' :  `._
            .-.'`.  ;   .'`.-.
   __      / : ___\ ;  /___ ; \      __
 ,'_ ""--.:__;".-.";: :".-.":__;.--"" _`,
 :' `.t""--.. '<@.`;_  ',@>` ..--""j.' `;
      `:-.._J '-.-'L__ `-- ' L_..-;'
        "-.__ ;  .-"  "-.  : __.-"
            L ' /.------.\ ' J
             "-.   "--"   .-"
            __.l"-:_JL_;-";.__
         .-j/'.;  ;""""  / .'\"-.
       .' /:`. :  :     /.".'';  `.
    .-"  / ;`.".  :    ."."   :    "-.
 .+"-.  : :   ".".". ."."      ;-._   \}%<<<
%^^A from https://www.ascii-code.com/ascii-art/movies/star-wars.php
\ducksay@AddAnimal{small-yoda}%>>>
{  \
    \
    __.-._
    '-._"7'
     /'.-c
     |  /T
    _)_/LI}%<<<
\ducksay@AddAnimal{r2d2}%>>>
{  \
    \ ,-----.
    ,'_/_|_\_`.
   /<<::8[O]::>\
  _|-----------|_
 |  | ====-=- |  |
 |  | -=-==== |  |
 \  | ::::|()||  /
  | | ....|()|| |
  | |_________| |
  | |\_______/| |
 /   \ /   \ /   \
 `---' `---' `---'}%<<<
\ducksay@AddAnimal{vader}%>>>
{  \     _.-'~~~~~~`-._
    \   /      ||      \
       /       ||       \
      |        ||        |
      | _______||_______ |
      |/ ----- \/ ----- \|
     /  (     )  (     )  \
    / \  ----- () -----  / \
   /   \      /||\      /   \
  /     \    /||||\    /     \
 /       \  /||||||\  /       \
/_        \O========O/        _\
  `--...__|`-._  _.-'|__...--'
          |    `'    |}%<<<
%</animals>
%    \end{macrocode}^^A<<<
%
%^^A<<<
%
% \end{implementation}^^A<<<
%
% \closingpage
%
\endinput
%
^^A vim: ft=tex fdm=marker fmr=>>>,<<<
