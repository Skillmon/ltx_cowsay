%% This package is distributed under the terms of the GPLv3 or later, or the
%% LPPL 1.3c or later, which ever license fits your needs the best.
%%
%% Copyright (C) 2017 by Jonathan P. Spratte
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{xparse,l3keys2e}

\def\ducksay@version{v1.2}
\def\ducksay@date{2017/10/30}

\ProvidesExplPackage
  {ducksay}           {\ducksay@date}
  {\ducksay@version}  {cowsay for LaTeX}

\ExplSyntaxOn

% variables >>>
\int_new:N \l_ducksay_strlen_int
\int_new:N \l_ducksay_lines_int
\seq_new:N \l_ducksay_msg_lines_seq
\tl_new:N \l_ducksay_align_tl
\tl_new:N \l_ducksay_msg_align_tl
\tl_new:N \l_ducksay_animal_tl
\clist_new:N \g__ducksay_all_animals_clist
\bool_new:N \l_ducksay_empty_ligatures_bool
\bool_new:N \l_ducksay_auto_bool
\cs_new:Nn \ducksay_bubble: {}
\cs_new:Nn \ducksay_body: {}
\regex_new:N \l_ducksay_ligatures_regex
\dim_new:N \l_ducksay_xwidth_dim
% temporary usage >>>
\box_new:N \l_ducksay_tmpa_box
\tl_new:N  \l_ducksay_tmpa_tl
%<<<
%<<<

% predefined regexes >>>
% regexes for \duckthink >>>
\regex_const:Nn \c_ducksay_first_regex  { \A(.\s*)\\ }
\regex_const:Nn \c_ducksay_second_regex { \A(.[^\c{null}]*\c{null}\s*)\\ }
\regex_const:Nn \c_ducksay_third_regex  {
  \A(.[^\c{null}]*\c{null}[^\c{null}]*\c{null}\s*)\\ }
%<<<
% regexes for \AddAnimal >>>
\regex_const:Nn \c_ducksay_newline_regex { \r }
\regex_set:Nn \l_ducksay_ligatures_regex { [`<>,'\-] }
%<<<
%<<<

\msg_new:nnnn { ducksay } { option-unknown }
  { Unknown\ option\ '#1'\ for\ package\ ducksay. }
  { If\ the\ option\ corresponds\ to\ one\ of\ the\ animals,\ make\ sure\ to\ 
    load\ that\ animal. }

\keys_define:nn { ducksay } {%>>>
  ,bubble .code:n       = \cs_set:Nn \ducksay_bubble: {#1}
  ,body   .code:n       = \cs_set:Nn \ducksay_body: {#1}
  ,align  .tl_set:N     = \l_ducksay_align_tl
  ,align  .value_required:n = true
  ,wd     .int_set:N    = \l_ducksay_strlen_int
  ,wd     .value_required:n = true
  ,ht     .int_set:N    = \l_ducksay_lines_int
  ,ht     .value_required:n = true
  ,animal .code:n       = {
    \keys_define:nn { ducksay } { default_animal .meta:n = {#1} }}
  ,animal .initial:n    = duck
  ,msg-align .tl_set:N  = \l_ducksay_msg_align_tl
  ,msg-align .initial:n = l
  ,msg-align .value_required:n = true
  ,rel-align .tl_set:N  = \l_ducksay_rel_align_tl
  ,rel-align .initial:n = l
  ,rel-align .value_required:n = true
  ,auto   .bool_set:N   = \l_ducksay_auto_bool
  ,WD     .meta:n       = { auto = true , wd = #1 }
  ,ligatures .code:n    = {
    \tl_if_empty:nTF { #1 }
      { \bool_set_true:N \l_ducksay_empty_ligatures_bool }
      {
        \bool_set_false:N \l_ducksay_empty_ligatures_bool
        \regex_set:Nn \l_ducksay_ligatures_regex { #1 }
      }
  }
  ,unknown   .code:n    = {
    \msg_error:nnx { ducksay } { option-unknown } { \l_keys_key_tl }
  }
}%<<<

\clist_set:Nn \g__ducksay_all_animals_clist {%>>>
  duck
  ,small-duck
  ,duck-family
  ,squirrel
  ,cow
  ,head-in
  ,sodomized
  ,tux
  ,pig
  ,frog
  ,snowman
  ,bunny
  ,small-rabbit
  ,rabbit
  ,dragon
  ,hedgehog
  ,kangaroo
  ,dog
  ,snail
  ,unicorn
  ,whale
  ,r2d2
  ,vader
  ,yoda-head
  ,small-yoda
  ,yoda
}%<<<

% define load-switch keys >>>
\clist_map_inline:Nn \g__ducksay_all_animals_clist
  {
    \bool_new:c { g__ducksay_load_#1_bool }
    \keys_define:nn { ducksay }
      { #1 .bool_gset:c = { g__ducksay_load_#1_bool } }
  }
\keys_define:nn { ducksay }
  {
    ,all .code:n =
      {
        \tl_if_empty:nTF { #1 }
          {
            \clist_map_inline:Nn \g__ducksay_all_animals_clist
              { \keys_set:nn { ducksay } { ##1 } }
          }
          {
            \clist_map_inline:Nn \g__ducksay_all_animals_clist
              { \keys_set:nn { ducksay } { ##1 = #1 } }
          }
      }
  }
\keys_set:nn { ducksay } { duck }
%<<<

\ProcessKeysOptions { ducksay }

% undefine load-switch keys >>>
\clist_map_inline:Nn \g__ducksay_all_animals_clist
  { \keys_define:nn { ducksay } { #1 .undefine: } }
\keys_define:nn { ducksay } { ,all .undefine: }
%<<<

\cs_new:Nn \ducksay_x_dims:%>>>
  {
    \hbox_set:Nn \l_ducksay_tmpa_box { x }
    \dim_set:Nn \l_ducksay_xwidth_dim { \box_wd:N \l_ducksay_tmpa_box }
  }
%<<<

\cs_new:Nn \ducksay_longest_line:n {%>>>
  \int_incr:N \l_ducksay_lines_int
  \exp_args:NNx \tl_set:Nn \l_ducksay_tmpa_tl { #1 }
  \regex_replace_all:nnN { \s } { \c{space} } \l_ducksay_tmpa_tl
  \int_set:Nn \l_ducksay_strlen_int {
    \int_max:nn { \l_ducksay_strlen_int } { \tl_count:N \l_ducksay_tmpa_tl } }
}%<<<

\cs_new:Nn \ducksay_open_bubble: {%>>>
  \begin{tabular}{@{}l@{}}
    \mbox{}\\
    \int_compare:nNnTF {\l_ducksay_lines_int} = {1} {
      (
    }{
      /
      \int_step_inline:nnnn {3}{1} {\l_ducksay_lines_int} {\\\kern-0.5ex|}
      \\\detokenize{\ }
    }
    \\[-1ex]\mbox{}
  \end{tabular}
  \begin{tabular}{@{}l@{}}
    _\\
    \int_step_inline:nnnn{2}{1}{\l_ducksay_lines_int}{\\}\\[-1ex]
    \mbox{-}
  \end{tabular}
}%<<<

\cs_new:Nn \ducksay_close_bubble: {%>>>
  \begin{tabular}{@{}l@{}}
    _\\
    \int_step_inline:nnnn{2}{1}{\l_ducksay_lines_int}{\\}\\[-1ex]
    {-}
  \end{tabular}
  \begin{tabular}{@{}r@{}}
    \mbox{}\\
    \int_compare:nNnTF {\l_ducksay_lines_int} = {1} {
      )
    }{
      \detokenize{\ }
      \int_step_inline:nnnn {3}{1}{\l_ducksay_lines_int} {\\|\kern-0.5ex}
      \\/
    }
    \\[-1ex]\mbox{}
  \end{tabular}
}%<<<

\cs_new:Nn \ducksay_print_msg:nn {%>>>
  \begin{tabular}{@{} #2 @{}}
    \int_step_inline:nnnn{1}{1}{\l_ducksay_strlen_int}{_}\\
    #1\\[-1ex]
    \int_step_inline:nnnn{1}{1}{\l_ducksay_strlen_int}{{-}}
  \end{tabular}
}%<<<

\cs_generate_variant:Nn \ducksay_print_msg:nn { nV }
\cs_generate_variant:Nn \ducksay_print:nn { nV }

\cs_new:Nn \ducksay_print:nn {%>>>
  \int_case:nnF { \l_ducksay_strlen_int }
    { { 0 } {
      \seq_set_split:Nnn \l_ducksay_msg_lines_seq {\\} { #1 }
      \seq_map_function:NN \l_ducksay_msg_lines_seq \ducksay_longest_line:n
    }}
    {
      \int_case:nn { \l_ducksay_lines_int }
        { { 0 } {
          \regex_count:nnN {\c{\\}} {#1} \l_ducksay_lines_int
          \int_incr:N \l_ducksay_lines_int
        }}
    }
  \group_begin:
    \frenchspacing
    \verbatim@font
    \@noligs
    \begin{tabular}[\l_ducksay_align_tl]{@{}#2@{}}
      \ducksay_bubble:
      \begin{tabular}{@{}l@{}}
        \ducksay_open_bubble:
        \ducksay_print_msg:nV {#1} \l_ducksay_msg_align_tl
        \ducksay_close_bubble:
      \end{tabular}\\
      \ducksay_body:
      \begin{tabular}{@{}l@{}}
        \l_ducksay_animal_tl
      \end{tabular}
    \end{tabular}
  \group_end:
}%<<<

\cs_new:Nn \ducksay_prepare_say_and_think:n {%>>>
  \int_zero:N \l_ducksay_strlen_int
  \int_zero:N \l_ducksay_lines_int
  \keys_define:nn { ducksay } { animal .meta:n = { ##1 } }
  \keys_set:nn { ducksay } { default_animal,#1 }
}%<<<

\cs_new:Nn \ducksay_to_duckthink: {%>>>
  \regex_replace_once:NnN \c_ducksay_first_regex  { \1O } \l_ducksay_animal_tl
  \regex_replace_once:NnN \c_ducksay_second_regex { \1o } \l_ducksay_animal_tl
  \regex_replace_once:NnN \c_ducksay_third_regex  { \1o } \l_ducksay_animal_tl
}%<<<

\NewDocumentCommand{\ducksay}{ O{} m }{%>>>
  \group_begin:
    \ducksay_prepare_say_and_think:n { #1 }
    \ducksay_print:nV { #2 } \l_ducksay_rel_align_tl
  \group_end:
}%<<<

\NewDocumentCommand{\duckthink}{ O{} m }{%>>>
  \group_begin:
    \ducksay_prepare_say_and_think:n { #1 }
    \ducksay_to_duckthink:
    \ducksay_print:nV { #2 } \l_ducksay_rel_align_tl
  \group_end:
}%<<<

\NewDocumentCommand{\DefaultAnimal}{ m }{%>>>
  \keys_define:nn { ducksay } { default_animal .meta:n = {#1} }}%<<<

\NewDocumentCommand{\DucksayOptions}{ m }{%>>>
  \keys_set:nn { ducksay } { #1 }}%<<<

\NewDocumentCommand{\AddAnimal}{ s m +v }{%>>>
  \tl_set:Nn \l_ducksay_tmpa_tl { \ #3 }
  \bool_if:NF \l_ducksay_empty_ligatures_bool
    {
      \regex_replace_all:NnN \l_ducksay_ligatures_regex { \c{mbox}\0 }
        \l_ducksay_tmpa_tl 
    }
  \regex_replace_all:NnN \c_ducksay_newline_regex { \c{tabularnewline}\c{null} }
    \l_ducksay_tmpa_tl
  \tl_gset_eq:cN { g_ducksay_animal_#2_tl } \l_ducksay_tmpa_tl
  \keys_define:nn { ducksay } {
    #2 .code:n = \tl_set_eq:Nc \l_ducksay_animal_tl { g_ducksay_animal_#2_tl }
  }
  \IfBooleanT{#1}
    {
      \keys_define:nn { ducksay } { default_animal .meta:n = { #2 } }
    }
}%<<<

\NewDocumentCommand{\ducksay@AddAnimal}{ s m +v }{%>>>
  \bool_if:cT { g__ducksay_load_#2_bool }{
    \tl_set:Nn \l_ducksay_tmpa_tl { \ #3 }
    \bool_if:NF \l_ducksay_empty_ligatures_bool {
      \regex_replace_all:NnN \l_ducksay_ligatures_regex { \c{mbox}\0 }
        \l_ducksay_tmpa_tl 
    }
    \regex_replace_all:NnN \c_ducksay_newline_regex
      { \c{tabularnewline}\c{null} } \l_ducksay_tmpa_tl
    \tl_gset_eq:cN { g_ducksay_animal_#2_tl } \l_ducksay_tmpa_tl
    \keys_define:nn { ducksay } {
      #2 .undefine:,
      #2 .code:n = \tl_set_eq:Nc \l_ducksay_animal_tl { g_ducksay_animal_#2_tl }
    }
    \IfBooleanT{#1}{
      \keys_define:nn { ducksay } {
        default_animal .meta:n = {#2} }}
  }
}%<<<

\ExplSyntaxOff

% Animals: >>>
% some of the below are from http://ascii.co.uk/art/kangaroo
\ducksay@AddAnimal{duck}%>>>
{  \
    \   __
      >(' )
        )/
       /(
      /  `----/
      \  ~=- /
    ~^~^~^~^~^~^~^}%<<<
\ducksay@AddAnimal{small-duck}%>>>
{  \
    \
      >()_
       (__)__ _}%<<<
\ducksay@AddAnimal{duck-family}%>>>
{  \
    \   __
      >(' )
        )/
       /(
      /  `----/  -()_  >()_
    __\__~=-_/__ _(__)__(__)__ _}%<<<
\ducksay@AddAnimal{cow}%>>>
{  \  ^__^
    \ (oo)\_______
      (__)\       )\/\
          ||----w |
          ||     ||}%<<<
\ducksay@AddAnimal{head-in}%>>>
{  \  
    \ ^__^         /
      (oo)\_______/  ________
      (__)\       )=(  ___|_ \____
          ||----w |  \ \    \____ |
          ||     ||   ||         ||}%<<<
\ducksay@AddAnimal{sodomized}%>>>
{  \             _
    \           (_)
      ^__^       / \
      (oo)\_____/_\ \
      (__)\       ) /
          ||----w ((
          ||     ||>>}%<<<
\ducksay@AddAnimal{tux}%>>>
{  \
    \  .--. 
      |o_o |
      |\_/ |
     //   \ \
    (|     | )
   /'\_   _/`\
   \___)=(___/}%<<<
\ducksay@AddAnimal{pig}%>>>
+  \     _//| .-~~~-.
    \ _/oo  }        }-@
     ('')_  }        |
      `--'| { }--{  }
           //_/  /_/+%<<<
\ducksay@AddAnimal{frog}%>>>
{   \
     \ (.)_(.)
    _ (   _   ) _
   / \/`-----'\/ \
 __\ ( (     ) ) /__
 )   /\ \._./ /\   (
  )_/ /|\   /|\ \_(}%<<<
\ducksay@AddAnimal{snowman}%>>>
{  \
    \_[_]_
      (")
   >-( : )-<
    (__:__)}%<<<
\ducksay@AddAnimal{hedgehog}%>>>
{  \    .\|//||\||.
    \  |/\/||/|//|/|
      /. `|/\\|/||/||
     o__,_|//|/||\||'}%<<<
\ducksay@AddAnimal{kangaroo}%>>>
{  \
    \ _,'   ___
     <__\__/   \
        \_  /  _\
          \,\ / \\
            //   \\
          ,/'     `\_,}%<<<
\ducksay@AddAnimal{rabbit}%>>> http://chris.com/ascii/index.php?art=animals/rabbits
{ \     / \`\         __
   \   |  \ `\      /`/ \
    \  \_/`\  \-"-/` /\  \
            |       |  \  |
            (d     b)   \_/
            /       \
        ,".|.'.\_/.'.|.",
       /   /\' _|_ '/\   \
       |  /  '-`"`-'  \  |
       | |             | |
       | \    \   /    / |
        \ \    \ /    / /
         `"`\   :   /'"`
             `""`""`}%<<<
\ducksay@AddAnimal{bunny}%>>>
{ \
   \      /
      /\ /
       ( )
     .( o ).}%<<<
\ducksay@AddAnimal{small-rabbit}%>>>
{  \
    \ _//
     (')---.
      _/-_( )o}%<<<
\ducksay@AddAnimal{dragon}%>>>
{     \                    / \  //\
       \    |\___/|      /   \//  \\
        \   /0  0  \__  /    //  | \ \    
           /     /  \/_/    //   |  \  \  
           @_^_@'/   \/_   //    |   \   \ 
           //_^_/     \/_ //     |    \    \
        ( //) |        \///      |     \     \
      ( / /) _|_ /   )  //       |      \     _\
    ( // /) '/,_ _ _/  ( ; -.    |    _ _\.-~        .-~~~^-.
  (( / / )) ,-{        _      `-.|.-~-.           .~         `.
 (( // / ))  '/\      /                 ~-. _ .-~      .-~^-.  \
 (( /// ))      `.   {            }                   /      \  \
  (( / ))     .----~-.\        \-'                 .~         \  `. \^-.
             ///.----..>        \             _ -~             `.  ^-`  ^-_
               ///-._ _ _ _ _ _ _}^ - - - - ~                     ~-- ,.-~
                                                                  /.-~}%<<<
\ducksay@AddAnimal{dog}%>>> http://www.ascii-art.de/ascii/def/dogs.txt
{  \     __
    \ .-'\/\
       "\   '------.
     ___/       (  .'_____
    '-----'"""'------"""""'}%<<<
\ducksay@AddAnimal{squirrel}%>>> http://ascii.co.uk/art/squirrel
{  \           ,;:;;,
    \         ;;;;;
      .=',    ;:;;:,
     /_', "=. ';:;:;
     @=:__,  \,;:;:'
       _(\.=  ;:;;'
      `"_(  _/="`
       `"'``}%<<<
\ducksay@AddAnimal{snail}%>>>
{  \
    \          .-""-.
      oo      ; .-.  :
       \\__..-: '.__.')._
        "-._.._'.__.-'_.."}%<<<
\ducksay@AddAnimal{unicorn}%>>> from http://www.ascii-art.de/ascii/uvw/unicorn.txt
{   \
     \       /((((((\\\\
     ---====((((((((((\\\\\
          ((           \\\\\\\
          ( (*    _/      \\\\\\\
            \    /  \      \\\\\\_         __,,__
             |  |   |       </    "------""     ((\\\\
             o_|   /        /                      \ \\\\    \\\\\\\
                  |  ._    (                        \ \\\\\\\\\\\\\\\\
                  | /                       /       /    \\\\\\\     \\
          .______/\/     /                 /       /         \\\
         / __.____/    _/          ___----(       /\
        / / / ________/:______,---'        \     /  \_
       / /  \ \                             \   \ \_  \
      ( <    \ \                             >  /    \ \
       \/      \\_                          / /       > )
                \_|                        / /       / /
                                         _//       _//
                                       /_|       /_|}%<<<
\ducksay@AddAnimal{whale}%>>> https://asciiart.website//index.php?art=animals/other%20(water)
{ \                |-.
   \     .---._     \ \.--|
    \  /       `-..__)  ,-'
      |     .          /
       \--.__,   .__.,'
        `-.___'._\_.'}%<<<

% from http://www.ascii-art.de/ascii/s/starwars.txt :
\ducksay@AddAnimal{yoda}%>>>
{   \
     \             ____
      \         _.' :  `._
            .-.'`.  ;   .'`.-.
   __      / : ___\ ;  /___ ; \      __
 ,'_ ""--.:__;".-.";: :".-.":__;.--"" _`,
 :' `.t""--.. '<@.`;_  ',@>` ..--""j.' `;
      `:-.._J '-.-'L__ `-- ' L_..-;'
        "-.__ ;  .-"  "-.  : __.-"
            L ' /.------.\ ' J
             "-.   "--"   .-"
            __.l"-:_JL_;-";.__
         .-j/'.;  ;""""  / .'\"-.
       .' /:`. :  :     /.".'';  `.
    .-"  / ;`.".  :    ."."   :    "-.
 .+"-.  : :   ".".". ."."      ;-._   \
 ; \  `.; ; .   "."-"."        : : "+. ;
 :  ;   ; ;  .   ."."    ;     : ;  : \:
 ;  :   ; :     / /     /  ,   ;:   ;  :
: \  ;  :  ;   ; /     :  ,   : ;  /  ::
;  ; :   ; :  ; ;      ;      ;   :   ;:
:  :  ;  :  ;. ;      '      : :  ;  : ;
;\    :   ; : .          ,   ; ;     ; ;
: `."-;   :  ;      .   ;   :  ;    /  ;
 ;    -:   ; :      ,  ,    ;  : .-"   :
 :\     \  :  ;    ,       : \.-"      :
  ;`.    \  ; :   .   ,    ;.'_..--  / ;
  :  "-.  "-:  ;     ,    :/."      .'  :
   \         \ :    :     ;/  __        :
    \       .-`.\        /t-""  ":-+.   :
     `.  .-"    `l    __/ /`. :  ; ; \  ;
       \   .-" .-"-.-"  .' .'j \  /   ;/
        \ / .-"   /.     .'.' ;_:'    ;
         :-""-.`./-.'     /    `.___.'
               \ `t  ._  /
                "-.t-._:'}%<<<
\ducksay@AddAnimal{yoda-head}%>>>
{   \
     \             ____
      \         _.' :  `._
            .-.'`.  ;   .'`.-.
   __      / : ___\ ;  /___ ; \      __
 ,'_ ""--.:__;".-.";: :".-.":__;.--"" _`,
 :' `.t""--.. '<@.`;_  ',@>` ..--""j.' `;
      `:-.._J '-.-'L__ `-- ' L_..-;'
        "-.__ ;  .-"  "-.  : __.-"
            L ' /.------.\ ' J
             "-.   "--"   .-"
            __.l"-:_JL_;-";.__
         .-j/'.;  ;""""  / .'\"-.
       .' /:`. :  :     /.".'';  `.
    .-"  / ;`.".  :    ."."   :    "-.
 .+"-.  : :   ".".". ."."      ;-._   \}%<<<
% from https://www.ascii-code.com/ascii-art/movies/star-wars.php
\ducksay@AddAnimal{small-yoda}%>>>
{  \
    \
    __.-._
    '-._"7'
     /'.-c
     |  /T
    _)_/LI}%<<<
\ducksay@AddAnimal{r2d2}%>>>
{  \
    \ ,-----.
    ,'_/_|_\_`.
   /<<::8[O]::>\
  _|-----------|_
 |  | ====-=- |  |
 |  | -=-==== |  |
 \  | ::::|()||  /
  | | ....|()|| |
  | |_________| |
  | |\_______/| |
 /   \ /   \ /   \
 `---' `---' `---'}%<<<
\ducksay@AddAnimal{vader}%>>>
{  \     _.-'~~~~~~`-._
    \   /      ||      \
       /       ||       \
      |        ||        |
      | _______||_______ |
      |/ ----- \/ ----- \|
     /  (     )  (     )  \
    / \  ----- () -----  / \
   /   \      /||\      /   \
  /     \    /||||\    /     \
 /       \  /||||||\  /       \
/_        \O========O/        _\
  `--...__|`-._  _.-'|__...--'
          |    `'    |}%<<<
%<<<

\endinput
% vim: fdm=marker foldmarker=>>>,<<<
